{"remainingRequest":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue2-timepicker/src/vue-timepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue2-timepicker/src/vue-timepicker.vue","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false\n}\n\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n    lazy: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined\n    }\n  },\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.minuteInterval > 60) {\n              this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n            } else if (options.minuteInterval < 1) {\n              this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n            }\n          }\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.secondInterval > 60) {\n              this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n            } else if (options.secondInterval < 1) {\n              this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n            }\n          }\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.value === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (!this.hour || !this.hour.length) ||\n        (!this.minute || !this.minute.length) ||\n        (this.secondType && (!this.second || !this.second.length)) ||\n        (this.apmType && (!this.apm || !this.apm.length))\n      ) {\n        return false\n      }\n      return true\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    has () {\n      const result = {\n        am: true,\n        pm: true\n      }\n      if (this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(this.hasAm)\n        result.pm = range.some(this.hasPm)\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.minuteRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"minute-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.minuteType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.minuteType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.minutes || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n        }\n      }\n      return range\n    },\n\n    secondRangeList () {\n      if (!this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.secondRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"second-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.secondType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.secondType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.seconds || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n        }\n      }\n      return range\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      // Force close the dropdown when disabled\n      if (toDisabled && this.showDropdown) {\n        this.showDropdown = false\n      }\n    }\n  },\n\n  methods: {\n    formatValue (type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? `0${i}` : String(i)\n        case 'h':\n          if (i === 0) {\n            return '12'\n          }\n          return String(i)\n        case 'k':\n          return String(i + 1)\n        case 'hh':\n          if (i === 0) {\n            return '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        case 'kk':\n          return (i + 1) < 10 ? `0${i + 1}` : String(i + 1)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return fallbackValue || ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH')\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm')\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      this.renderHoursList()\n      this.renderList('minute')\n\n      if (this.secondType) {\n        this.renderList('second')\n      }\n\n      if (this.apmType) {\n        this.renderApmList()\n      }\n\n      this.$nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = (this.baseOn12Hours) ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        hours.push(this.formatValue(this.hourType, i))\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!listType || (listType !== 'minute' && listType !== 'second')) { return }\n\n      if (listType === 'minute') {\n        interval = interval || this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval\n      } else {\n        interval = interval || this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval\n      }\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          result.push(this.formatValue(this.minuteType, i))\n        } else {\n          result.push(this.formatValue(this.secondType, i))\n        }\n      }\n\n      if (listType === 'minute') {\n        this.minutes = result\n      } else {\n        this.seconds = result\n      }\n    },\n\n    renderApmList () {\n      let apms = []\n      if (this.apmType) {\n        apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n      }\n      this.apms = apms\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.value}\"`)\n        }\n        this.readStringValues(this.value)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.value || {})}\"`)\n        }\n        this.readObjectValues(this.value)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      ['hour', 'minute', 'second', 'apm'].forEach(section => {\n        const sectionType = this[`${section}Type`]\n        if (values.indexOf(sectionType) > -1) {\n          const sanitizedValue = this.sanitizedValue(sectionType, timeValue[sectionType])\n          this[section] = sanitizedValue\n          timeValue[sectionType] = sanitizedValue\n        } else {\n          this[section] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n\n      let regxStr = `${this.hourType}|${this.minuteType}`\n      if (this.secondType) {\n        regxStr += `|${this.secondType}`\n      }\n      if (this.apmType) {\n        regxStr += `|${this.apmType}`\n      }\n\n      const tokensRegxStr = `[(${regxStr})]+`\n      const othersRegxStr = `[^(${regxStr})]+`\n\n      const needsPolyfill = Boolean(!formatString.matchAll || typeof formatString.matchAll !== 'function')\n      const tokensMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, tokensRegxStr) : formatString.matchAll(new RegExp(tokensRegxStr, 'g'))\n      const othersMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, othersRegxStr) : formatString.matchAll(new RegExp(othersRegxStr, 'g'))\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const tokenType = tokenChunks[vrIndex].token\n            timeValue[tokenType] = this.setValueFromString(value, tokenType)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${this.value}`)\n        }\n      }\n    },\n\n    matchAllPolyfill (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      timeValue[this.hourType] = ''\n      timeValue[this.minuteType] = ''\n      if (this.secondType) {\n        timeValue[this.secondType] = ''\n      }\n      if (this.apmType) {\n        timeValue[this.apmType] = ''\n      }\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, tokenType) {\n      if (!tokenType || !parsedValue) { return '' }\n      let stdValue = ''\n      switch (tokenType) {\n        case `${this.hourType}`:\n          stdValue = (parsedValue !== this.hourType) ? parsedValue : ''\n          this.hour = stdValue\n          break\n        case `${this.minuteType}`:\n          stdValue = (parsedValue !== this.minuteType) ? parsedValue : ''\n          this.minute = stdValue\n          break\n        case `${this.secondType}`:\n          stdValue = (parsedValue !== this.secondType) ? parsedValue : ''\n          this.second = stdValue\n          break\n        case `${this.apmType}`:\n          stdValue = (parsedValue !== this.apmType) ? parsedValue : ''\n          this.apm = stdValue\n          break\n      }\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      const hourValue = baseHour || baseHour === 0 ? Number(baseHour) : ''\n      const apmValue = (this.baseOn12Hours && this.apm) ? String(this.apm).toLowerCase() : false\n\n      CONFIG.HOUR_TOKENS.forEach((token) => {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour\n          return\n        }\n\n        let value\n        let apm\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue % 12\n              }\n            } else {\n              value = hourValue % 24\n            }\n            fullValues[token] = (token === 'HH' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue === 12 ? 24 : hourValue\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue\n            }\n            fullValues[token] = (token === 'kk' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue\n              apm = apmValue || 'am'\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = ''\n                fullValues.a = ''\n                fullValues.A = ''\n                return\n              } else if (hourValue > 11) {\n                apm = 'pm'\n                value = hourValue === 12 ? 12 : hourValue % 12\n              } else {\n                if (this.baseOn12Hours) {\n                  apm = ''\n                } else {\n                  apm = 'am'\n                }\n                value = hourValue % 12 === 0 ? 12 : hourValue\n              }\n            }\n            fullValues[token] = (token === 'hh' && value < 10) ? `0${value}` : String(value)\n            fullValues.a = apm\n            fullValues.A = apm.toUpperCase()\n            break\n        }\n      })\n\n      if (this.minute || this.minute === 0) {\n        const minuteValue = Number(this.minute)\n        fullValues.m = String(minuteValue)\n        fullValues.mm = minuteValue < 10 ? `0${minuteValue}` : String(minuteValue)\n      } else {\n        fullValues.m = ''\n        fullValues.mm = ''\n      }\n\n      if (this.second || this.second === 0) {\n        const secondValue = Number(this.second)\n        fullValues.s = String(secondValue)\n        fullValues.ss = secondValue < 10 ? `0${secondValue}` : String(secondValue)\n      } else {\n        fullValues.s = ''\n        fullValues.ss = ''\n      }\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    emitTimeValue () {\n      if (!this.fullValues) { return }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues))\n      const baseTimeValue = JSON.parse(JSON.stringify(this.timeValue || {}))\n      const timeValue = {}\n\n      Object.keys(baseTimeValue).forEach((key) => {\n        timeValue[key] = fullValues[key] || ''\n      })\n\n      if (this.useStringValue) {\n        this.$emit('input', this.inputIsEmpty ? '' : String(this.displayTime))\n      } else {\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      })\n    },\n\n    translate12hRange (value) {\n      const valueT = value.match(/^(\\d{1,2})(a|p|A|P)$/)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    hasAm (value) {\n      return value < 12 || value === 24\n    },\n\n    hasPm (value) {\n      return value >= 12 && value < 24\n    },\n\n    doubleCheckHourValue () {\n      if (!this.hour || !this.apm || !this.restrictedHourRange || !this.hourRangeIn24HrFormat) { return }\n      const hourIn24 = this.translate12hRange(`${this.hour}${this.apm.substr(0, 1)}`)\n      if (!this.hourRangeIn24HrFormat.includes(hourIn24)) {\n        this.hour = ''\n        if (this.debugMode) {\n          this.debugLog(`After switching AM/PM, the hour value is no longer in the \"hour-range\". Reset it to empty now.`)\n        }\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    isDisabledMinute (value) {\n      if (!this.minuteRangeList) { return false }\n      return !this.minuteRangeList.includes(value)\n    },\n\n    isDisabledSecond (value) {\n      if (!this.secondRangeList) { return false }\n      return !this.secondRangeList.includes(value)\n    },\n\n    isDisabledApm (value) {\n      if (!this.restrictedHourRange) { return false }\n      return !this.has[(value || '').toLowerCase()]\n    },\n\n    forceApmSelection () {\n      if (!this.apm || !this.apm.length) {\n        if (this.has.am) {\n          this.apm = this.apmType === 'A' ? 'AM' : 'am'\n        } else if (this.has.pm) {\n          this.apm = this.apmType === 'A' ? 'PM' : 'pm'\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && (apmValue || '').toLowerCase() === 'am') {\n        return this.amText\n      }\n      if (this.pmText && (apmValue || '').toLowerCase() === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleDropdown () {\n      if (this.disabled) { return }\n      this.showDropdown = !this.showDropdown\n\n      if (this.showDropdown) {\n        this.$emit('open')\n        this.isFocusing = true\n        // Record to check if value did changed in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n      } else {\n        this.$emit('close')\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        if (this.showDropdown) {\n          this.forceApmSelection()\n        } else {\n          this.emptyApmSelection()\n        }\n      }\n    },\n\n    select (type, value) {\n      if (type === 'hour') {\n        if (this.isDisabledHour(value)) { return }\n        this.hour = value\n      } else if (type === 'minute') {\n        if (this.isDisabledMinute(value)) { return }\n        this.minute = value\n      } else if (type === 'second') {\n        if (this.isDisabledSecond(value)) { return }\n        this.second = value\n      } else if (type === 'apm') {\n        if (this.isDisabledApm(value)) { return }\n        this.apm = value\n        if (this.restrictedHourRange) {\n          this.doubleCheckHourValue()\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.display-time')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const delay = +(this.blurDelay || 0) || 300\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, delay)\n    },\n\n    onBlur () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        if (this.showDropdown) {\n          this.toggleDropdown()\n        }\n      }\n    },\n\n    keepFocusing () {\n      this.isFocusing = true\n    },\n\n    validItemsInCol (columnClass) {\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    getSideItems (columnClass, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(columnClass)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the first valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the last valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      } else {\n        return siblingsInCol[selfIndex + 1]\n      }\n    },\n\n    prevItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    nextItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    getSideColumnClass (columnClass, toLeft = false) {\n      let targetColumn\n      // Nav to Left\n      if (toLeft) {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = -1\n            break\n          case 'minutes':\n            targetColumn = 'hours'\n            break\n          case 'seconds':\n            targetColumn = 'minutes'\n            break\n          case 'apms':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else {\n              targetColumn = 'minutes'\n            }\n            break\n        }\n      // Nav to Right\n      } else {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = 'minutes'\n            break\n          case 'minutes':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'seconds':\n            if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'apms':\n            targetColumn = 1\n            break\n        }\n      }\n\n      if (targetColumn === -1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (targetColumn === 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n\n      return targetColumn\n    },\n\n    getFirstItemInSideColumn (columnClass, toLeft = false) {\n      const targetColumnClass = this.getSideColumnClass(columnClass, toLeft)\n      if (!targetColumnClass) { return }\n      const listItems = this.validItemsInCol(targetColumnClass)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    toLeftColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    getTokenRegex (typeToken) {\n      switch (typeToken) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (typeToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === typeToken)\n    },\n\n    isValidValue (typeToken, testValue) {\n      if (!typeToken || this.isEmptyValue(typeToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(typeToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (typeToken, inputValue) {\n      if (this.isValidValue(typeToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    this.renderFormat()\n  },\n\n  beforeDestroy () {\n    window.clearTimeout(this.debounceTimer)\n  }\n}\n",{"version":3,"sources":["vue-timepicker.vue"],"names":[],"mappingsfile":"vue-timepicker.vue","sourceRoot":"node_modules/vue2-timepicker/src","sourcesContent":["<script>\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false\n}\n\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n    lazy: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined\n    }\n  },\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.minuteInterval > 60) {\n              this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n            } else if (options.minuteInterval < 1) {\n              this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n            }\n          }\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.secondInterval > 60) {\n              this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n            } else if (options.secondInterval < 1) {\n              this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n            }\n          }\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.value === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (!this.hour || !this.hour.length) ||\n        (!this.minute || !this.minute.length) ||\n        (this.secondType && (!this.second || !this.second.length)) ||\n        (this.apmType && (!this.apm || !this.apm.length))\n      ) {\n        return false\n      }\n      return true\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    has () {\n      const result = {\n        am: true,\n        pm: true\n      }\n      if (this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(this.hasAm)\n        result.pm = range.some(this.hasPm)\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.minuteRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"minute-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.minuteType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.minuteType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.minutes || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n        }\n      }\n      return range\n    },\n\n    secondRangeList () {\n      if (!this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.secondRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"second-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.secondType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.secondType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.seconds || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n        }\n      }\n      return range\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      // Force close the dropdown when disabled\n      if (toDisabled && this.showDropdown) {\n        this.showDropdown = false\n      }\n    }\n  },\n\n  methods: {\n    formatValue (type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? `0${i}` : String(i)\n        case 'h':\n          if (i === 0) {\n            return '12'\n          }\n          return String(i)\n        case 'k':\n          return String(i + 1)\n        case 'hh':\n          if (i === 0) {\n            return '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        case 'kk':\n          return (i + 1) < 10 ? `0${i + 1}` : String(i + 1)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return fallbackValue || ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH')\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm')\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      this.renderHoursList()\n      this.renderList('minute')\n\n      if (this.secondType) {\n        this.renderList('second')\n      }\n\n      if (this.apmType) {\n        this.renderApmList()\n      }\n\n      this.$nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = (this.baseOn12Hours) ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        hours.push(this.formatValue(this.hourType, i))\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!listType || (listType !== 'minute' && listType !== 'second')) { return }\n\n      if (listType === 'minute') {\n        interval = interval || this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval\n      } else {\n        interval = interval || this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval\n      }\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          result.push(this.formatValue(this.minuteType, i))\n        } else {\n          result.push(this.formatValue(this.secondType, i))\n        }\n      }\n\n      if (listType === 'minute') {\n        this.minutes = result\n      } else {\n        this.seconds = result\n      }\n    },\n\n    renderApmList () {\n      let apms = []\n      if (this.apmType) {\n        apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n      }\n      this.apms = apms\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.value}\"`)\n        }\n        this.readStringValues(this.value)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.value || {})}\"`)\n        }\n        this.readObjectValues(this.value)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      ['hour', 'minute', 'second', 'apm'].forEach(section => {\n        const sectionType = this[`${section}Type`]\n        if (values.indexOf(sectionType) > -1) {\n          const sanitizedValue = this.sanitizedValue(sectionType, timeValue[sectionType])\n          this[section] = sanitizedValue\n          timeValue[sectionType] = sanitizedValue\n        } else {\n          this[section] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n\n      let regxStr = `${this.hourType}|${this.minuteType}`\n      if (this.secondType) {\n        regxStr += `|${this.secondType}`\n      }\n      if (this.apmType) {\n        regxStr += `|${this.apmType}`\n      }\n\n      const tokensRegxStr = `[(${regxStr})]+`\n      const othersRegxStr = `[^(${regxStr})]+`\n\n      const needsPolyfill = Boolean(!formatString.matchAll || typeof formatString.matchAll !== 'function')\n      const tokensMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, tokensRegxStr) : formatString.matchAll(new RegExp(tokensRegxStr, 'g'))\n      const othersMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, othersRegxStr) : formatString.matchAll(new RegExp(othersRegxStr, 'g'))\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const tokenType = tokenChunks[vrIndex].token\n            timeValue[tokenType] = this.setValueFromString(value, tokenType)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${this.value}`)\n        }\n      }\n    },\n\n    matchAllPolyfill (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      timeValue[this.hourType] = ''\n      timeValue[this.minuteType] = ''\n      if (this.secondType) {\n        timeValue[this.secondType] = ''\n      }\n      if (this.apmType) {\n        timeValue[this.apmType] = ''\n      }\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, tokenType) {\n      if (!tokenType || !parsedValue) { return '' }\n      let stdValue = ''\n      switch (tokenType) {\n        case `${this.hourType}`:\n          stdValue = (parsedValue !== this.hourType) ? parsedValue : ''\n          this.hour = stdValue\n          break\n        case `${this.minuteType}`:\n          stdValue = (parsedValue !== this.minuteType) ? parsedValue : ''\n          this.minute = stdValue\n          break\n        case `${this.secondType}`:\n          stdValue = (parsedValue !== this.secondType) ? parsedValue : ''\n          this.second = stdValue\n          break\n        case `${this.apmType}`:\n          stdValue = (parsedValue !== this.apmType) ? parsedValue : ''\n          this.apm = stdValue\n          break\n      }\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      const hourValue = baseHour || baseHour === 0 ? Number(baseHour) : ''\n      const apmValue = (this.baseOn12Hours && this.apm) ? String(this.apm).toLowerCase() : false\n\n      CONFIG.HOUR_TOKENS.forEach((token) => {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour\n          return\n        }\n\n        let value\n        let apm\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue % 12\n              }\n            } else {\n              value = hourValue % 24\n            }\n            fullValues[token] = (token === 'HH' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue === 12 ? 24 : hourValue\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue\n            }\n            fullValues[token] = (token === 'kk' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue\n              apm = apmValue || 'am'\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = ''\n                fullValues.a = ''\n                fullValues.A = ''\n                return\n              } else if (hourValue > 11) {\n                apm = 'pm'\n                value = hourValue === 12 ? 12 : hourValue % 12\n              } else {\n                if (this.baseOn12Hours) {\n                  apm = ''\n                } else {\n                  apm = 'am'\n                }\n                value = hourValue % 12 === 0 ? 12 : hourValue\n              }\n            }\n            fullValues[token] = (token === 'hh' && value < 10) ? `0${value}` : String(value)\n            fullValues.a = apm\n            fullValues.A = apm.toUpperCase()\n            break\n        }\n      })\n\n      if (this.minute || this.minute === 0) {\n        const minuteValue = Number(this.minute)\n        fullValues.m = String(minuteValue)\n        fullValues.mm = minuteValue < 10 ? `0${minuteValue}` : String(minuteValue)\n      } else {\n        fullValues.m = ''\n        fullValues.mm = ''\n      }\n\n      if (this.second || this.second === 0) {\n        const secondValue = Number(this.second)\n        fullValues.s = String(secondValue)\n        fullValues.ss = secondValue < 10 ? `0${secondValue}` : String(secondValue)\n      } else {\n        fullValues.s = ''\n        fullValues.ss = ''\n      }\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    emitTimeValue () {\n      if (!this.fullValues) { return }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues))\n      const baseTimeValue = JSON.parse(JSON.stringify(this.timeValue || {}))\n      const timeValue = {}\n\n      Object.keys(baseTimeValue).forEach((key) => {\n        timeValue[key] = fullValues[key] || ''\n      })\n\n      if (this.useStringValue) {\n        this.$emit('input', this.inputIsEmpty ? '' : String(this.displayTime))\n      } else {\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      })\n    },\n\n    translate12hRange (value) {\n      const valueT = value.match(/^(\\d{1,2})(a|p|A|P)$/)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    hasAm (value) {\n      return value < 12 || value === 24\n    },\n\n    hasPm (value) {\n      return value >= 12 && value < 24\n    },\n\n    doubleCheckHourValue () {\n      if (!this.hour || !this.apm || !this.restrictedHourRange || !this.hourRangeIn24HrFormat) { return }\n      const hourIn24 = this.translate12hRange(`${this.hour}${this.apm.substr(0, 1)}`)\n      if (!this.hourRangeIn24HrFormat.includes(hourIn24)) {\n        this.hour = ''\n        if (this.debugMode) {\n          this.debugLog(`After switching AM/PM, the hour value is no longer in the \"hour-range\". Reset it to empty now.`)\n        }\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    isDisabledMinute (value) {\n      if (!this.minuteRangeList) { return false }\n      return !this.minuteRangeList.includes(value)\n    },\n\n    isDisabledSecond (value) {\n      if (!this.secondRangeList) { return false }\n      return !this.secondRangeList.includes(value)\n    },\n\n    isDisabledApm (value) {\n      if (!this.restrictedHourRange) { return false }\n      return !this.has[(value || '').toLowerCase()]\n    },\n\n    forceApmSelection () {\n      if (!this.apm || !this.apm.length) {\n        if (this.has.am) {\n          this.apm = this.apmType === 'A' ? 'AM' : 'am'\n        } else if (this.has.pm) {\n          this.apm = this.apmType === 'A' ? 'PM' : 'pm'\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && (apmValue || '').toLowerCase() === 'am') {\n        return this.amText\n      }\n      if (this.pmText && (apmValue || '').toLowerCase() === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleDropdown () {\n      if (this.disabled) { return }\n      this.showDropdown = !this.showDropdown\n\n      if (this.showDropdown) {\n        this.$emit('open')\n        this.isFocusing = true\n        // Record to check if value did changed in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n      } else {\n        this.$emit('close')\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        if (this.showDropdown) {\n          this.forceApmSelection()\n        } else {\n          this.emptyApmSelection()\n        }\n      }\n    },\n\n    select (type, value) {\n      if (type === 'hour') {\n        if (this.isDisabledHour(value)) { return }\n        this.hour = value\n      } else if (type === 'minute') {\n        if (this.isDisabledMinute(value)) { return }\n        this.minute = value\n      } else if (type === 'second') {\n        if (this.isDisabledSecond(value)) { return }\n        this.second = value\n      } else if (type === 'apm') {\n        if (this.isDisabledApm(value)) { return }\n        this.apm = value\n        if (this.restrictedHourRange) {\n          this.doubleCheckHourValue()\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.display-time')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const delay = +(this.blurDelay || 0) || 300\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, delay)\n    },\n\n    onBlur () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        if (this.showDropdown) {\n          this.toggleDropdown()\n        }\n      }\n    },\n\n    keepFocusing () {\n      this.isFocusing = true\n    },\n\n    validItemsInCol (columnClass) {\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    getSideItems (columnClass, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(columnClass)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the first valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the last valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      } else {\n        return siblingsInCol[selfIndex + 1]\n      }\n    },\n\n    prevItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    nextItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    getSideColumnClass (columnClass, toLeft = false) {\n      let targetColumn\n      // Nav to Left\n      if (toLeft) {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = -1\n            break\n          case 'minutes':\n            targetColumn = 'hours'\n            break\n          case 'seconds':\n            targetColumn = 'minutes'\n            break\n          case 'apms':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else {\n              targetColumn = 'minutes'\n            }\n            break\n        }\n      // Nav to Right\n      } else {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = 'minutes'\n            break\n          case 'minutes':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'seconds':\n            if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'apms':\n            targetColumn = 1\n            break\n        }\n      }\n\n      if (targetColumn === -1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (targetColumn === 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n\n      return targetColumn\n    },\n\n    getFirstItemInSideColumn (columnClass, toLeft = false) {\n      const targetColumnClass = this.getSideColumnClass(columnClass, toLeft)\n      if (!targetColumnClass) { return }\n      const listItems = this.validItemsInCol(targetColumnClass)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    toLeftColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    getTokenRegex (typeToken) {\n      switch (typeToken) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (typeToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === typeToken)\n    },\n\n    isValidValue (typeToken, testValue) {\n      if (!typeToken || this.isEmptyValue(typeToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(typeToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (typeToken, inputValue) {\n      if (this.isValidValue(typeToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    this.renderFormat()\n  },\n\n  beforeDestroy () {\n    window.clearTimeout(this.debounceTimer)\n  }\n}\n</script>\n\n<template>\n<span class=\"vue__time-picker time-picker\" :style=\"inputWidthStyle\">\n  <input type=\"text\" class=\"display-time\"\n         :class=\"[inputClass, {'disabled': disabled}]\"\n         :style=\"inputWidthStyle\"\n         :id=\"id\"\n         :name=\"name\"\n         :value=\"inputIsEmpty ? null : customDisplayTime\"\n         :placeholder=\"placeholder || formatString\"\n         :tabindex=\"disabled ? null : tabindex\"\n         :disabled=\"disabled\"\n         readonly\n         @focus=\"onFocus\"\n         @blur=\"debounceBlur\"\n         @keydown.esc.exact=\"escBlur\" />\n  <span class=\"clear-btn\" v-if=\"!showDropdown && showClearBtn\" @click=\"clearTime\">&times;</span>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click=\"toggleDropdown\"></div>\n  <div class=\"dropdown\" v-show=\"showDropdown\" :style=\"inputWidthStyle\" @mouseup=\"keepFocusing\" @click.stop=\"\">\n    <div class=\"select-list\" :style=\"inputWidthStyle\">\n      <!-- Common Keyboard Support: less event listeners -->\n      <template v-if=\"!advancedKeyboard\">\n        <ul class=\"hours\">\n          <li class=\"hint\" v-text=\"hourLabelText\"></li>\n          <template v-for=\"(hr, hIndex) in hours\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledHour(hr))\"\n                :key=\"hIndex\"\n                :class=\"{active: hour === hr}\"\n                :disabled=\"isDisabledHour(hr)\"\n                v-text=\"hr\"\n                @click=\"select('hour', hr)\"></li>\n          </template>\n        </ul>\n        <ul class=\"minutes\">\n          <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n          <template v-for=\"(m, mIndex) in minutes\">\n            <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabledMinute(m))\"\n                :key=\"mIndex\"\n                :class=\"{active: minute === m}\"\n                :disabled=\"isDisabledMinute(m)\"\n                v-text=\"m\"\n                @click=\"select('minute', m)\"></li>\n          </template>\n        </ul>\n        <ul class=\"seconds\" v-if=\"secondType\">\n          <li class=\"hint\" v-text=\"secondLabelText\"></li>\n          <template v-for=\"(s, sIndex) in seconds\">\n            <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabledSecond(s))\"\n                :key=\"sIndex\"\n                :class=\"{active: second === s}\"\n                :disabled=\"isDisabledSecond(s)\"\n                v-text=\"s\"\n                @click=\"select('second', s)\"></li>\n          </template>\n        </ul>\n        <ul class=\"apms\" v-if=\"apmType\">\n          <li class=\"hint\" v-text=\"apmLabelText\"></li>\n          <template v-for=\"(a, aIndex) in apms\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledApm(a))\"\n                :key=\"aIndex\"\n                :class=\"{active: apm === a}\"\n                :disabled=\"isDisabledApm(a)\"\n                v-text=\"apmDisplayText(a)\"\n                @click=\"select('apm', a)\"></li>\n          </template>\n        </ul>\n      </template><!-- / Common Keyboard Support -->\n\n      <!--\n        Advanced Keyboard Support\n        Addeds hundreds of additional event lisenters\n      -->\n      <template v-if=\"advancedKeyboard\">\n        <ul class=\"hours\">\n          <li class=\"hint\" v-text=\"hourLabelText\"></li>\n          <template v-for=\"(hr, hIndex) in hours\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledHour(hr))\"\n                :key=\"hIndex\"\n                :class=\"{active: hour === hr}\"\n                :tabindex=\"isDisabledHour(hr) ? null : tabindex\"\n                :data-key=\"hr\"\n                :disabled=\"isDisabledHour(hr)\"\n                v-text=\"hr\"\n                @click=\"select('hour', hr)\"\n                @keydown.space.prevent=\"select('hour', hr)\"\n                @keydown.enter.prevent=\"select('hour', hr)\"\n                @keydown.up.prevent=\"prevItem('hours', hr)\"\n                @keydown.down.prevent=\"nextItem('hours', hr)\"\n                @keydown.left.prevent=\"toLeftColumn('hours')\"\n                @keydown.right.prevent=\"toRightColumn('hours')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"minutes\">\n          <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n          <template v-for=\"(m, mIndex) in minutes\">\n            <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabledMinute(m))\"\n                :key=\"mIndex\"\n                :class=\"{active: minute === m}\"\n                :tabindex=\"isDisabledMinute(m) ? null : tabindex\"\n                :data-key=\"m\"\n                :disabled=\"isDisabledMinute(m)\"\n                v-text=\"m\"\n                @click=\"select('minute', m)\"\n                @keydown.space.prevent=\"select('minute', m)\"\n                @keydown.enter.prevent=\"select('minute', m)\"\n                @keydown.up.prevent=\"prevItem('minutes', m)\"\n                @keydown.down.prevent=\"nextItem('minutes', m)\"\n                @keydown.left.prevent=\"toLeftColumn('minutes')\"\n                @keydown.right.prevent=\"toRightColumn('minutes')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"seconds\" v-if=\"secondType\">\n          <li class=\"hint\" v-text=\"secondLabelText\"></li>\n          <template v-for=\"(s, sIndex) in seconds\">\n            <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabledSecond(s))\"\n                :key=\"sIndex\"\n                :class=\"{active: second === s}\"\n                :tabindex=\"isDisabledSecond(s) ? null : tabindex\"\n                :data-key=\"s\"\n                :disabled=\"isDisabledSecond(s)\"\n                v-text=\"s\"\n                @click=\"select('second', s)\"\n                @keydown.space.prevent=\"select('second', s)\"\n                @keydown.enter.prevent=\"select('second', s)\"\n                @keydown.up.prevent=\"prevItem('seconds', s)\"\n                @keydown.down.prevent=\"nextItem('seconds', s)\"\n                @keydown.left.prevent=\"toLeftColumn('seconds')\"\n                @keydown.right.prevent=\"toRightColumn('seconds')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"apms\" v-if=\"apmType\">\n          <li class=\"hint\" v-text=\"apmLabelText\"></li>\n          <template v-for=\"(a, aIndex) in apms\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledApm(a))\"\n                :key=\"aIndex\"\n                :class=\"{active: apm === a}\"\n                :tabindex=\"isDisabledApm(a) ? null : tabindex\"\n                :data-key=\"a\"\n                :disabled=\"isDisabledApm(a)\"\n                v-text=\"apmDisplayText(a)\"\n                @click=\"select('apm', a)\"\n                @keydown.space.prevent=\"select('apm', a)\"\n                @keydown.enter.prevent=\"select('apm', a)\"\n                @keydown.up.prevent=\"prevItem('apms', a)\"\n                @keydown.down.prevent=\"nextItem('apms', a)\"\n                @keydown.left.prevent=\"toLeftColumn('apms')\"\n                @keydown.right.prevent=\"toRightColumn('apms')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n      </template><!-- / Advanced Keyboard Support -->\n    </div>\n  </div>\n</span>\n</template>\n\n<style>\n.vue__time-picker {\n  display: inline-block;\n  position: relative;\n  font-size: 1em;\n  width: 10em;\n  font-family: sans-serif;\n  vertical-align: middle;\n}\n\n.vue__time-picker * {\n  box-sizing: border-box;\n}\n\n.vue__time-picker input.display-time {\n  border: 1px solid #d2d2d2;\n  width: 10em;\n  height: 2.2em;\n  padding: 0.3em 0.5em;\n  font-size: 1em;\n}\n\n.vue__time-picker input.display-time:disabled,\n.vue__time-picker input.display-time.disabled {\n  color: #d2d2d2;\n}\n\n.vue__time-picker .clear-btn {\n  position: absolute;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  margin-top: -0.15em;\n  z-index: 3;\n  font-size: 1.1em;\n  line-height: 1em;\n  vertical-align: middle;\n  width: 1.3em;\n  color: #d2d2d2;\n  background: rgba(255,255,255,0);\n  text-align: center;\n  font-style: normal;\n\n  -webkit-transition: color .2s;\n  transition: color .2s;\n}\n\n.vue__time-picker .clear-btn:hover {\n  color: #797979;\n  cursor: pointer;\n}\n\n.vue__time-picker .time-picker-overlay {\n  z-index: 2;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.vue__time-picker .dropdown {\n  position: absolute;\n  z-index: 5;\n  top: calc(2.2em + 2px);\n  left: 0;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0,0,0,0.15);\n  width: 10em;\n  height: 10em;\n  font-weight: normal;\n}\n\n.vue__time-picker .dropdown .select-list {\n  width: 10em;\n  height: 10em;\n  overflow: hidden;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between;\n}\n\n.vue__time-picker .dropdown ul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  flex: 1 1 0.00001px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.vue__time-picker .dropdown ul.minutes,\n.vue__time-picker .dropdown ul.seconds,\n.vue__time-picker .dropdown ul.apms{\n  border-left: 1px solid #fff;\n}\n\n.vue__time-picker .dropdown ul li {\n  list-style: none;\n  text-align: center;\n  padding: 0.3em 0;\n  color: #161616;\n}\n\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):focus {\n  background: rgba(0,0,0,.08);\n  color: #161616;\n  cursor: pointer;\n}\n\n.vue__time-picker .dropdown ul li:not([disabled]).active,\n.vue__time-picker .dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker .dropdown ul li:not([disabled]).active:focus {\n  background: #41B883;\n  color: #fff;\n}\n\n.vue__time-picker .dropdown ul li[disabled],\n.vue__time-picker .dropdown ul li[disabled]:hover {\n  background: transparent;\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.vue__time-picker .dropdown .hint {\n  color: #a5a5a5;\n  cursor: default;\n  font-size: 0.8em;\n}\n</style>\n"]}]}