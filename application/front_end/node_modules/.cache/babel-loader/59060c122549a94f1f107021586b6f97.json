{"remainingRequest":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/babel-loader/lib/index.js!/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue2-timepicker/src/vue-timepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue2-timepicker/src/vue-timepicker.vue","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/Users/hongjoonkim/Desktop/Walton_final_project/application/front_end/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nvar CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n};\nvar DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false\n};\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: {\n      type: [Object, String]\n    },\n    format: {\n      type: String\n    },\n    minuteInterval: {\n      type: [Number, String]\n    },\n    secondInterval: {\n      type: [Number, String]\n    },\n    hourRange: {\n      type: Array\n    },\n    minuteRange: {\n      type: Array\n    },\n    secondRange: {\n      type: Array\n    },\n    hideDisabledHours: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledMinutes: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledSeconds: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledItems: {\n      type: Boolean,\n      default: false\n    },\n    hideClearButton: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    closeOnComplete: {\n      type: Boolean,\n      default: false\n    },\n    id: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    inputClass: {\n      type: [String, Object, Array]\n    },\n    placeholder: {\n      type: String\n    },\n    tabindex: {\n      type: [Number, String],\n      default: 0\n    },\n    inputWidth: {\n      type: String\n    },\n    hourLabel: {\n      type: String\n    },\n    minuteLabel: {\n      type: String\n    },\n    secondLabel: {\n      type: String\n    },\n    apmLabel: {\n      type: String\n    },\n    amText: {\n      type: String\n    },\n    pmText: {\n      type: String\n    },\n    blurDelay: {\n      type: [Number, String]\n    },\n    advancedKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    debugMode: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      timeValue: {},\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined\n    };\n  },\n  computed: {\n    opts: function opts() {\n      var options = Object.assign({}, DEFAULT_OPTIONS);\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format);\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval;\n      } // minuteInterval failsafe\n\n\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60;\n        } else {\n          if (this.debugMode) {\n            if (options.minuteInterval > 60) {\n              this.debugLog(\"\\\"minute-interval\\\" should be less than 60. Current value is \".concat(this.minuteInterval));\n            } else if (options.minuteInterval < 1) {\n              this.debugLog(\"\\\"minute-interval\\\" should be NO less than 1. Current value is \".concat(this.minuteInterval));\n            }\n          }\n\n          options.minuteInterval = 1;\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval;\n      } // secondInterval failsafe\n\n\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60;\n        } else {\n          if (this.debugMode) {\n            if (options.secondInterval > 60) {\n              this.debugLog(\"\\\"second-interval\\\" should be less than 60. Current value is \".concat(this.secondInterval));\n            } else if (options.secondInterval < 1) {\n              this.debugLog(\"\\\"second-interval\\\" should be NO less than 1. Current value is \".concat(this.secondInterval));\n            }\n          }\n\n          options.secondInterval = 1;\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange));\n\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange));\n\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange));\n\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true;\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true;\n      }\n\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true;\n      }\n\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true;\n      }\n\n      return options;\n    },\n    useStringValue: function useStringValue() {\n      return typeof this.value === 'string';\n    },\n    formatString: function formatString() {\n      return this.opts.format || DEFAULT_OPTIONS.format;\n    },\n    displayTime: function displayTime() {\n      var formatString = String(this.formatString);\n\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour);\n      }\n\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute);\n      }\n\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second);\n      }\n\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm);\n      }\n\n      return formatString;\n    },\n    customDisplayTime: function customDisplayTime() {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime;\n      }\n\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm));\n    },\n    inputIsEmpty: function inputIsEmpty() {\n      return this.formatString === this.displayTime;\n    },\n    allValueSelected: function allValueSelected() {\n      if (!this.hour || !this.hour.length || !this.minute || !this.minute.length || this.secondType && (!this.second || !this.second.length) || this.apmType && (!this.apm || !this.apm.length)) {\n        return false;\n      }\n\n      return true;\n    },\n    showClearBtn: function showClearBtn() {\n      if (this.hideClearButton || this.disabled) {\n        return false;\n      }\n\n      return !this.inputIsEmpty;\n    },\n    baseOn12Hours: function baseOn12Hours() {\n      return this.hourType === 'h' || this.hourType === 'hh';\n    },\n    hourRangeIn24HrFormat: function hourRangeIn24HrFormat() {\n      var _this = this;\n\n      if (!this.opts.hourRange) {\n        return false;\n      }\n\n      if (!this.opts.hourRange.length) {\n        return [];\n      }\n\n      var range = [];\n      this.opts.hourRange.forEach(function (value) {\n        if (value instanceof Array) {\n          if (value.length > 2 && _this.debugMode) {\n            _this.debugLog(\"Nested array within \\\"hour-range\\\" must contain no more than two items. Only the first two items of \".concat(JSON.stringify(value), \" will be taken into account.\"));\n          }\n\n          var start = value[0];\n          var end = value[1] || value[0];\n\n          if (_this.is12hRange(start)) {\n            start = _this.translate12hRange(start);\n          }\n\n          if (_this.is12hRange(end)) {\n            end = _this.translate12hRange(end);\n          }\n\n          for (var i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) {\n              continue;\n            }\n\n            if (!range.includes(i)) {\n              range.push(i);\n            }\n          }\n        } else {\n          if (_this.is12hRange(value)) {\n            value = _this.translate12hRange(value);\n          } else {\n            value = +value;\n          }\n\n          if (value < 0 || value > 24) {\n            return;\n          }\n\n          if (!range.includes(value)) {\n            range.push(value);\n          }\n        }\n      });\n      range.sort(function (l, r) {\n        return l - r;\n      });\n      return range;\n    },\n    restrictedHourRange: function restrictedHourRange() {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) {\n        return false;\n      } // 12-Hour\n\n\n      if (this.baseOn12Hours) {\n        var range = this.hourRangeIn24HrFormat.map(function (value) {\n          if (value === 12) {\n            return '12p';\n          } else if (value === 24 || value === 0) {\n            return '12a';\n          }\n\n          return value > 12 ? \"\".concat(value % 12, \"p\") : \"\".concat(value, \"a\");\n        });\n        return range;\n      } // 24-Hour\n\n\n      return this.hourRangeIn24HrFormat;\n    },\n    has: function has() {\n      var result = {\n        am: true,\n        pm: true\n      };\n\n      if (this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        var range = [].concat([], this.hourRangeIn24HrFormat);\n        result.am = range.some(this.hasAm);\n        result.pm = range.some(this.hasPm);\n      }\n\n      return result;\n    },\n    minuteRangeList: function minuteRangeList() {\n      var _this2 = this;\n\n      if (!this.opts.minuteRange) {\n        return false;\n      }\n\n      if (!this.opts.minuteRange.length) {\n        return [];\n      }\n\n      var range = [];\n      var formatedValue;\n      this.opts.minuteRange.forEach(function (value) {\n        if (value instanceof Array) {\n          if (value.length > 2 && _this2.debugMode) {\n            _this2.debugLog(\"Nested array within \\\"minute-range\\\" must contain no more than two items. Only the first two items of \".concat(JSON.stringify(value), \" will be taken into account.\"));\n          }\n\n          var start = value[0];\n          var end = value[1] || value[0];\n\n          for (var i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) {\n              continue;\n            }\n\n            formatedValue = _this2.formatValue(_this2.minuteType, i);\n\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue);\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) {\n            return;\n          }\n\n          formatedValue = _this2.formatValue(_this2.minuteType, value);\n\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue);\n          }\n        }\n      });\n      range.sort(function (l, r) {\n        return l - r;\n      }); // Debug Mode\n\n      if (this.debugMode) {\n        var validItems = (this.minutes || []).filter(function (item) {\n          return range.includes(item);\n        });\n\n        if (!validItems || !validItems.length) {\n          this.debugLog(\"The minute list is empty due to the \\\"minute-range\\\" config\\nminute-range: \".concat(JSON.stringify(this.minuteRange), \"\\nminute-interval: \").concat(this.opts.minuteInterval));\n        }\n      }\n\n      return range;\n    },\n    secondRangeList: function secondRangeList() {\n      var _this3 = this;\n\n      if (!this.opts.secondRange) {\n        return false;\n      }\n\n      if (!this.opts.secondRange.length) {\n        return [];\n      }\n\n      var range = [];\n      var formatedValue;\n      this.opts.secondRange.forEach(function (value) {\n        if (value instanceof Array) {\n          if (value.length > 2 && _this3.debugMode) {\n            _this3.debugLog(\"Nested array within \\\"second-range\\\" must contain no more than two items. Only the first two items of \".concat(JSON.stringify(value), \" will be taken into account.\"));\n          }\n\n          var start = value[0];\n          var end = value[1] || value[0];\n\n          for (var i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) {\n              continue;\n            }\n\n            formatedValue = _this3.formatValue(_this3.secondType, i);\n\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue);\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) {\n            return;\n          }\n\n          formatedValue = _this3.formatValue(_this3.secondType, value);\n\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue);\n          }\n        }\n      });\n      range.sort(function (l, r) {\n        return l - r;\n      }); // Debug Mode\n\n      if (this.debugMode) {\n        var validItems = (this.seconds || []).filter(function (item) {\n          return range.includes(item);\n        });\n\n        if (!validItems || !validItems.length) {\n          this.debugLog(\"The second list is empty due to the \\\"second-range\\\" config\\nsecond-range: \".concat(JSON.stringify(this.secondRange), \"\\nsecond-interval: \").concat(this.opts.secondInterval));\n        }\n      }\n\n      return range;\n    },\n    hourLabelText: function hourLabelText() {\n      return this.hourLabel || this.hourType;\n    },\n    minuteLabelText: function minuteLabelText() {\n      return this.minuteLabel || this.minuteType;\n    },\n    secondLabelText: function secondLabelText() {\n      return this.secondLabel || this.secondType;\n    },\n    apmLabelText: function apmLabelText() {\n      return this.apmLabel || this.apmType;\n    },\n    inputWidthStyle: function inputWidthStyle() {\n      if (!this.inputWidth || !this.inputWidth.length) {\n        return;\n      }\n\n      return {\n        width: this.inputWidth\n      };\n    }\n  },\n  watch: {\n    'opts.format': function optsFormat(newValue) {\n      this.renderFormat(newValue);\n    },\n    'opts.minuteInterval': function optsMinuteInterval(newInteval) {\n      this.renderList('minute', newInteval);\n    },\n    'opts.secondInterval': function optsSecondInterval(newInteval) {\n      this.renderList('second', newInteval);\n    },\n    value: {\n      deep: true,\n      handler: function handler() {\n        this.readValues();\n      }\n    },\n    displayTime: function displayTime() {\n      this.fillValues();\n    },\n    disabled: function disabled(toDisabled) {\n      // Force close the dropdown when disabled\n      if (toDisabled && this.showDropdown) {\n        this.showDropdown = false;\n      }\n    }\n  },\n  methods: {\n    formatValue: function formatValue(type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i);\n\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? \"0\".concat(i) : String(i);\n\n        case 'h':\n          if (i === 0) {\n            return '12';\n          }\n\n          return String(i);\n\n        case 'k':\n          return String(i + 1);\n\n        case 'hh':\n          if (i === 0) {\n            return '12';\n          }\n\n          return i < 10 ? \"0\".concat(i) : String(i);\n\n        case 'kk':\n          return i + 1 < 10 ? \"0\".concat(i + 1) : String(i + 1);\n\n        default:\n          return '';\n      }\n    },\n    checkAcceptingType: function checkAcceptingType(validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) {\n        return '';\n      }\n\n      for (var i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i];\n        }\n      }\n\n      return fallbackValue || '';\n    },\n    renderFormat: function renderFormat(newFormat) {\n      var _this4 = this;\n\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format;\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH');\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm');\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat);\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat);\n      this.renderHoursList();\n      this.renderList('minute');\n\n      if (this.secondType) {\n        this.renderList('second');\n      }\n\n      if (this.apmType) {\n        this.renderApmList();\n      }\n\n      this.$nextTick(function () {\n        _this4.readValues();\n      });\n    },\n    renderHoursList: function renderHoursList() {\n      var hoursCount = this.baseOn12Hours ? 12 : 24;\n      var hours = [];\n\n      for (var i = 0; i < hoursCount; i++) {\n        hours.push(this.formatValue(this.hourType, i));\n      }\n\n      this.hours = hours;\n    },\n    renderList: function renderList(listType, interval) {\n      if (!listType || listType !== 'minute' && listType !== 'second') {\n        return;\n      }\n\n      if (listType === 'minute') {\n        interval = interval || this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval;\n      } else {\n        interval = interval || this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval;\n      }\n\n      var result = [];\n\n      for (var i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          result.push(this.formatValue(this.minuteType, i));\n        } else {\n          result.push(this.formatValue(this.secondType, i));\n        }\n      }\n\n      if (listType === 'minute') {\n        this.minutes = result;\n      } else {\n        this.seconds = result;\n      }\n    },\n    renderApmList: function renderApmList() {\n      var apms = [];\n\n      if (this.apmType) {\n        apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm'];\n      }\n\n      this.apms = apms;\n    },\n    readValues: function readValues() {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(\"Received a string value: \\\"\".concat(this.value, \"\\\"\"));\n        }\n\n        this.readStringValues(this.value);\n      } else {\n        if (this.debugMode) {\n          this.debugLog(\"Received an object value: \\\"\".concat(JSON.stringify(this.value || {}), \"\\\"\"));\n        }\n\n        this.readObjectValues(this.value);\n      }\n    },\n    readObjectValues: function readObjectValues(objValue) {\n      var _this5 = this;\n\n      var timeValue = JSON.parse(JSON.stringify(objValue || {}));\n      var values = Object.keys(timeValue); // Failsafe for empty `v-model` object\n\n      if (values.length === 0) {\n        this.addFallbackValues();\n        return;\n      }\n\n      ['hour', 'minute', 'second', 'apm'].forEach(function (section) {\n        var sectionType = _this5[\"\".concat(section, \"Type\")];\n\n        if (values.indexOf(sectionType) > -1) {\n          var sanitizedValue = _this5.sanitizedValue(sectionType, timeValue[sectionType]);\n\n          _this5[section] = sanitizedValue;\n          timeValue[sectionType] = sanitizedValue;\n        } else {\n          _this5[section] = '';\n        }\n      });\n      this.timeValue = timeValue;\n    },\n    readStringValues: function readStringValues(stringValue) {\n      var _this6 = this;\n\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues();\n        return;\n      }\n\n      var formatString = String(this.formatString);\n      var regxStr = \"\".concat(this.hourType, \"|\").concat(this.minuteType);\n\n      if (this.secondType) {\n        regxStr += \"|\".concat(this.secondType);\n      }\n\n      if (this.apmType) {\n        regxStr += \"|\".concat(this.apmType);\n      }\n\n      var tokensRegxStr = \"[(\".concat(regxStr, \")]+\");\n      var othersRegxStr = \"[^(\".concat(regxStr, \")]+\");\n      var needsPolyfill = Boolean(!formatString.matchAll || typeof formatString.matchAll !== 'function');\n      var tokensMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, tokensRegxStr) : formatString.matchAll(new RegExp(tokensRegxStr, 'g'));\n      var othersMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, othersRegxStr) : formatString.matchAll(new RegExp(othersRegxStr, 'g'));\n      var chunks = [];\n      var tokenChunks = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tokensMatchAll[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var tkMatch = _step.value;\n          var tokenMatchItem = {\n            index: tkMatch.index,\n            token: tkMatch[0],\n            isValueToken: true\n          };\n          chunks.push(tokenMatchItem);\n          tokenChunks.push(tokenMatchItem);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = othersMatchAll[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var otMatch = _step2.value;\n          chunks.push({\n            index: otMatch.index,\n            token: otMatch[0]\n          });\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      chunks.sort(function (l, r) {\n        return l.index < r.index ? -1 : 1;\n      });\n      var regexCombo = '';\n      chunks.forEach(function (chunk) {\n        if (chunk.isValueToken) {\n          var tokenRegex = _this6.getTokenRegex(chunk.token) || '';\n          regexCombo += tokenRegex;\n        } else {\n          var safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1');\n          regexCombo += \"(?:\".concat(safeChars, \")\");\n        }\n      });\n      var comboReg = new RegExp(regexCombo); // Do test before match\n\n      if (comboReg.test(stringValue)) {\n        var matchResults = stringValue.match(new RegExp(regexCombo));\n        var valueResults = matchResults.slice(1, tokenChunks.length + 1);\n        var timeValue = {};\n        valueResults.forEach(function (value, vrIndex) {\n          if (tokenChunks[vrIndex]) {\n            var tokenType = tokenChunks[vrIndex].token;\n            timeValue[tokenType] = _this6.setValueFromString(value, tokenType);\n          }\n        });\n        this.timeValue = timeValue;\n\n        if (this.debugMode) {\n          var tokenChunksForLog = tokenChunks.map(function (tChunk) {\n            return tChunk && tChunk.token;\n          });\n          this.debugLog(\"Successfully parsed values \".concat(JSON.stringify(valueResults), \"\\nfor \").concat(JSON.stringify(tokenChunksForLog), \"\\nin format pattern '\").concat(this.formatString, \"'\"));\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(\"The input string in \\\"v-model\\\" does NOT match the \\\"format\\\" pattern\\nformat: \".concat(this.formatString, \"\\nv-model: \").concat(this.value));\n        }\n      }\n    },\n    matchAllPolyfill: function matchAllPolyfill(targetString, regxStr) {\n      var matchesList = targetString.match(new RegExp(regxStr, 'g'));\n      var result = [];\n      var indicesReg = [];\n\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(function (matchedItem) {\n          var existIndex = indicesReg.findIndex(function (idxItem) {\n            return idxItem.str === matchedItem;\n          });\n          var index;\n\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index;\n            }\n          } else {\n            var itemIndicesRegex = new RegExp(matchedItem, 'g');\n            index = itemIndicesRegex.exec(targetString).index;\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            });\n          }\n\n          result.push({\n            0: String(matchedItem),\n            index: index\n          });\n        });\n      }\n\n      return result;\n    },\n    addFallbackValues: function addFallbackValues() {\n      var timeValue = {};\n      timeValue[this.hourType] = '';\n      timeValue[this.minuteType] = '';\n\n      if (this.secondType) {\n        timeValue[this.secondType] = '';\n      }\n\n      if (this.apmType) {\n        timeValue[this.apmType] = '';\n      }\n\n      this.timeValue = timeValue;\n    },\n    setValueFromString: function setValueFromString(parsedValue, tokenType) {\n      if (!tokenType || !parsedValue) {\n        return '';\n      }\n\n      var stdValue = '';\n\n      switch (tokenType) {\n        case \"\".concat(this.hourType):\n          stdValue = parsedValue !== this.hourType ? parsedValue : '';\n          this.hour = stdValue;\n          break;\n\n        case \"\".concat(this.minuteType):\n          stdValue = parsedValue !== this.minuteType ? parsedValue : '';\n          this.minute = stdValue;\n          break;\n\n        case \"\".concat(this.secondType):\n          stdValue = parsedValue !== this.secondType ? parsedValue : '';\n          this.second = stdValue;\n          break;\n\n        case \"\".concat(this.apmType):\n          stdValue = parsedValue !== this.apmType ? parsedValue : '';\n          this.apm = stdValue;\n          break;\n      }\n\n      return stdValue;\n    },\n    fillValues: function fillValues(forceEmit) {\n      var _this7 = this;\n\n      var fullValues = {};\n      var baseHour = this.hour;\n      var baseHourType = this.hourType;\n      var hourValue = baseHour || baseHour === 0 ? Number(baseHour) : '';\n      var apmValue = this.baseOn12Hours && this.apm ? String(this.apm).toLowerCase() : false;\n      CONFIG.HOUR_TOKENS.forEach(function (token) {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour;\n          return;\n        }\n\n        var value;\n        var apm;\n\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = '';\n              return;\n            } else if (_this7.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue;\n              } else {\n                value = hourValue % 12;\n              }\n            } else {\n              value = hourValue % 24;\n            }\n\n            fullValues[token] = token === 'HH' && value < 10 ? \"0\".concat(value) : String(value);\n            break;\n\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = '';\n              return;\n            } else if (_this7.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue;\n              } else {\n                value = hourValue === 12 ? 24 : hourValue;\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue;\n            }\n\n            fullValues[token] = token === 'kk' && value < 10 ? \"0\".concat(value) : String(value);\n            break;\n\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue;\n              apm = apmValue || 'am';\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = '';\n                fullValues.a = '';\n                fullValues.A = '';\n                return;\n              } else if (hourValue > 11) {\n                apm = 'pm';\n                value = hourValue === 12 ? 12 : hourValue % 12;\n              } else {\n                if (_this7.baseOn12Hours) {\n                  apm = '';\n                } else {\n                  apm = 'am';\n                }\n\n                value = hourValue % 12 === 0 ? 12 : hourValue;\n              }\n            }\n\n            fullValues[token] = token === 'hh' && value < 10 ? \"0\".concat(value) : String(value);\n            fullValues.a = apm;\n            fullValues.A = apm.toUpperCase();\n            break;\n        }\n      });\n\n      if (this.minute || this.minute === 0) {\n        var minuteValue = Number(this.minute);\n        fullValues.m = String(minuteValue);\n        fullValues.mm = minuteValue < 10 ? \"0\".concat(minuteValue) : String(minuteValue);\n      } else {\n        fullValues.m = '';\n        fullValues.mm = '';\n      }\n\n      if (this.second || this.second === 0) {\n        var secondValue = Number(this.second);\n        fullValues.s = String(secondValue);\n        fullValues.ss = secondValue < 10 ? \"0\".concat(secondValue) : String(secondValue);\n      } else {\n        fullValues.s = '';\n        fullValues.ss = '';\n      }\n\n      this.fullValues = fullValues; // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue();\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleDropdown();\n      }\n    },\n    emitTimeValue: function emitTimeValue() {\n      if (!this.fullValues) {\n        return;\n      }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.');\n        }\n\n        return;\n      }\n\n      var fullValues = JSON.parse(JSON.stringify(this.fullValues));\n      var baseTimeValue = JSON.parse(JSON.stringify(this.timeValue || {}));\n      var timeValue = {};\n      Object.keys(baseTimeValue).forEach(function (key) {\n        timeValue[key] = fullValues[key] || '';\n      });\n\n      if (this.useStringValue) {\n        this.$emit('input', this.inputIsEmpty ? '' : String(this.displayTime));\n      } else {\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)));\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      });\n    },\n    translate12hRange: function translate12hRange(value) {\n      var valueT = value.match(/^(\\d{1,2})(a|p|A|P)$/);\n\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12);\n      }\n\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0);\n    },\n    hasAm: function hasAm(value) {\n      return value < 12 || value === 24;\n    },\n    hasPm: function hasPm(value) {\n      return value >= 12 && value < 24;\n    },\n    doubleCheckHourValue: function doubleCheckHourValue() {\n      if (!this.hour || !this.apm || !this.restrictedHourRange || !this.hourRangeIn24HrFormat) {\n        return;\n      }\n\n      var hourIn24 = this.translate12hRange(\"\".concat(this.hour).concat(this.apm.substr(0, 1)));\n\n      if (!this.hourRangeIn24HrFormat.includes(hourIn24)) {\n        this.hour = '';\n\n        if (this.debugMode) {\n          this.debugLog(\"After switching AM/PM, the hour value is no longer in the \\\"hour-range\\\". Reset it to empty now.\");\n        }\n      }\n    },\n    isDisabledHour: function isDisabledHour(value) {\n      if (!this.restrictedHourRange) {\n        return false;\n      }\n\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false;\n        } else {\n          var token = this.apm.toLowerCase() === 'am' ? 'a' : 'p';\n          return !this.restrictedHourRange.includes(\"\".concat(+value).concat(token));\n        }\n      } // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n\n\n      if ((this.hourType === 'HH' || this.hourType === 'H') && +value === 0 && this.restrictedHourRange.includes(24)) {\n        return false;\n      }\n\n      return !this.restrictedHourRange.includes(+value);\n    },\n    isDisabledMinute: function isDisabledMinute(value) {\n      if (!this.minuteRangeList) {\n        return false;\n      }\n\n      return !this.minuteRangeList.includes(value);\n    },\n    isDisabledSecond: function isDisabledSecond(value) {\n      if (!this.secondRangeList) {\n        return false;\n      }\n\n      return !this.secondRangeList.includes(value);\n    },\n    isDisabledApm: function isDisabledApm(value) {\n      if (!this.restrictedHourRange) {\n        return false;\n      }\n\n      return !this.has[(value || '').toLowerCase()];\n    },\n    forceApmSelection: function forceApmSelection() {\n      if (!this.apm || !this.apm.length) {\n        if (this.has.am) {\n          this.apm = this.apmType === 'A' ? 'AM' : 'am';\n        } else if (this.has.pm) {\n          this.apm = this.apmType === 'A' ? 'PM' : 'pm';\n        }\n      }\n    },\n    emptyApmSelection: function emptyApmSelection() {\n      if (this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = '';\n      }\n    },\n    apmDisplayText: function apmDisplayText(apmValue) {\n      if (this.amText && (apmValue || '').toLowerCase() === 'am') {\n        return this.amText;\n      }\n\n      if (this.pmText && (apmValue || '').toLowerCase() === 'pm') {\n        return this.pmText;\n      }\n\n      return apmValue;\n    },\n    toggleDropdown: function toggleDropdown() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.showDropdown = !this.showDropdown;\n\n      if (this.showDropdown) {\n        this.$emit('open');\n        this.isFocusing = true; // Record to check if value did changed in the later phase\n\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '');\n        }\n      } else {\n        this.$emit('close');\n        this.isFocusing = false;\n\n        if (this.lazy) {\n          this.fillValues(true);\n          this.bakDisplayTime = undefined;\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        if (this.showDropdown) {\n          this.forceApmSelection();\n        } else {\n          this.emptyApmSelection();\n        }\n      }\n    },\n    select: function select(type, value) {\n      if (type === 'hour') {\n        if (this.isDisabledHour(value)) {\n          return;\n        }\n\n        this.hour = value;\n      } else if (type === 'minute') {\n        if (this.isDisabledMinute(value)) {\n          return;\n        }\n\n        this.minute = value;\n      } else if (type === 'second') {\n        if (this.isDisabledSecond(value)) {\n          return;\n        }\n\n        this.second = value;\n      } else if (type === 'apm') {\n        if (this.isDisabledApm(value)) {\n          return;\n        }\n\n        this.apm = value;\n\n        if (this.restrictedHourRange) {\n          this.doubleCheckHourValue();\n        }\n      }\n    },\n    clearTime: function clearTime() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.apm = '';\n\n      if (this.lazy) {\n        this.fillValues(true);\n      }\n    },\n    //\n    // Additional Keyboard Navigation\n    //\n    onFocus: function onFocus() {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n\n      if (!this.showDropdown) {\n        this.toggleDropdown();\n      }\n    },\n    escBlur: function escBlur() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.isFocusing = false;\n      var inputBox = this.$el.querySelectorAll('input.display-time')[0];\n\n      if (inputBox) {\n        inputBox.blur();\n      }\n    },\n    debounceBlur: function debounceBlur() {\n      var _this8 = this;\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.isFocusing = false;\n      var delay = +(this.blurDelay || 0) || 300;\n      window.clearTimeout(this.debounceTimer);\n      this.debounceTimer = window.setTimeout(function () {\n        window.clearTimeout(_this8.debounceTimer);\n\n        _this8.onBlur();\n      }, delay);\n    },\n    onBlur: function onBlur() {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.isFocusing) {\n        if (this.showDropdown) {\n          this.toggleDropdown();\n        }\n      }\n    },\n    keepFocusing: function keepFocusing() {\n      this.isFocusing = true;\n    },\n    validItemsInCol: function validItemsInCol(columnClass) {\n      return this.$el.querySelectorAll(\"ul.\".concat(columnClass, \" > li:not(.hint):not([disabled])\"));\n    },\n    getSideItems: function getSideItems(columnClass, dataKey) {\n      var getPrevious = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var siblingsInCol = this.validItemsInCol(columnClass);\n      var selfIndex = Array.prototype.findIndex.call(siblingsInCol, function (sbl) {\n        return sbl.getAttribute('data-key') === dataKey;\n      }); // Already the first item\n\n      if (getPrevious && selfIndex === 0) {\n        if (this.debugMode) {\n          this.debugLog(\"\\\"\".concat(dataKey, \"\\\" is the first valid item in \\\"\").concat(columnClass, \"\\\" list already\"));\n        }\n\n        return;\n      } // Already the last item\n\n\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        if (this.debugMode) {\n          this.debugLog(\"\\\"\".concat(dataKey, \"\\\" is the last valid item in \\\"\").concat(columnClass, \"\\\" list already\"));\n        }\n\n        return;\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1];\n      } else {\n        return siblingsInCol[selfIndex + 1];\n      }\n    },\n    prevItem: function prevItem(columnClass, dataKey) {\n      var targetItem = this.getSideItems(columnClass, dataKey, true);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    nextItem: function nextItem(columnClass, dataKey) {\n      var targetItem = this.getSideItems(columnClass, dataKey, false);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    getSideColumnClass: function getSideColumnClass(columnClass) {\n      var toLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var targetColumn; // Nav to Left\n\n      if (toLeft) {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = -1;\n            break;\n\n          case 'minutes':\n            targetColumn = 'hours';\n            break;\n\n          case 'seconds':\n            targetColumn = 'minutes';\n            break;\n\n          case 'apms':\n            if (this.secondType) {\n              targetColumn = 'seconds';\n            } else {\n              targetColumn = 'minutes';\n            }\n\n            break;\n        } // Nav to Right\n\n      } else {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = 'minutes';\n            break;\n\n          case 'minutes':\n            if (this.secondType) {\n              targetColumn = 'seconds';\n            } else if (this.apmType) {\n              targetColumn = 'apms';\n            } else {\n              targetColumn = 1;\n            }\n\n            break;\n\n          case 'seconds':\n            if (this.apmType) {\n              targetColumn = 'apms';\n            } else {\n              targetColumn = 1;\n            }\n\n            break;\n\n          case 'apms':\n            targetColumn = 1;\n            break;\n        }\n      }\n\n      if (targetColumn === -1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already');\n        }\n\n        return;\n      } else if (targetColumn === 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already');\n        }\n\n        return;\n      }\n\n      return targetColumn;\n    },\n    getFirstItemInSideColumn: function getFirstItemInSideColumn(columnClass) {\n      var toLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var targetColumnClass = this.getSideColumnClass(columnClass, toLeft);\n\n      if (!targetColumnClass) {\n        return;\n      }\n\n      var listItems = this.validItemsInCol(targetColumnClass);\n\n      if (listItems && listItems[0]) {\n        return listItems[0];\n      }\n    },\n    toLeftColumn: function toLeftColumn(columnClass) {\n      var targetItem = this.getFirstItemInSideColumn(columnClass, true);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    toRightColumn: function toRightColumn(columnClass) {\n      var targetItem = this.getFirstItemInSideColumn(columnClass, false);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    //\n    // Helpers\n    //\n    is12hRange: function is12hRange(value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value);\n    },\n    isNumber: function isNumber(value) {\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    },\n    getTokenRegex: function getTokenRegex(typeToken) {\n      switch (typeToken) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})';\n\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})';\n\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})';\n\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})';\n\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})';\n\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})';\n\n        case 'mm':\n          return '([0-5][0-9]|m{2})';\n\n        case 'ss':\n          return '([0-5][0-9]|s{2})';\n\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})';\n\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})';\n\n        case 'A':\n          return '(AM|PM|A{1})';\n\n        case 'a':\n          return '(am|pm|a{1})';\n\n        default:\n          return '';\n      }\n    },\n    isEmptyValue: function isEmptyValue(typeToken, testValue) {\n      return !testValue || !testValue.length || testValue && testValue === typeToken;\n    },\n    isValidValue: function isValidValue(typeToken, testValue) {\n      if (!typeToken || this.isEmptyValue(typeToken, testValue)) {\n        return false;\n      }\n\n      var tokenRegexStr = this.getTokenRegex(typeToken);\n\n      if (!tokenRegexStr || !tokenRegexStr.length) {\n        return false;\n      }\n\n      return new RegExp(\"^\".concat(tokenRegexStr, \"$\")).test(testValue);\n    },\n    sanitizedValue: function sanitizedValue(typeToken, inputValue) {\n      if (this.isValidValue(typeToken, inputValue)) {\n        return inputValue;\n      }\n\n      return '';\n    },\n    debugLog: function debugLog(logText) {\n      var _this9 = this;\n\n      if (!logText || !logText.length) {\n        return;\n      }\n\n      var identifier = '';\n\n      if (this.id) {\n        identifier += \"#\".concat(this.id);\n      }\n\n      if (this.name) {\n        identifier += \"[name=\".concat(this.name, \"]\");\n      }\n\n      if (this.inputClass) {\n        var inputClasses = [];\n\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g);\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass);\n        } else if (_typeof(this.inputClass) === 'object') {\n          Object.keys(this.inputClass).forEach(function (clsName) {\n            if (_this9.inputClass[clsName]) {\n              inputClasses.push(clsName);\n            }\n          });\n        }\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = inputClasses[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var inputClass = _step3.value;\n\n            if (inputClass && inputClass.trim().length) {\n              identifier += \".\".concat(inputClass.trim());\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n\n      var finalLogText = \"DEBUG: \".concat(logText).concat(identifier ? \"\\n\\t(\".concat(identifier, \")\") : '');\n\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText);\n      } else {\n        window.console.log(finalLogText);\n      }\n    }\n  },\n  mounted: function mounted() {\n    window.clearTimeout(this.debounceTimer);\n    this.renderFormat();\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.clearTimeout(this.debounceTimer);\n  }\n};",{"version":3,"sources":["vue-timepicker.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false\n}\n\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n    lazy: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined\n    }\n  },\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.minuteInterval > 60) {\n              this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n            } else if (options.minuteInterval < 1) {\n              this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n            }\n          }\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          if (this.debugMode) {\n            if (options.secondInterval > 60) {\n              this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n            } else if (options.secondInterval < 1) {\n              this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n            }\n          }\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.value === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (!this.hour || !this.hour.length) ||\n        (!this.minute || !this.minute.length) ||\n        (this.secondType && (!this.second || !this.second.length)) ||\n        (this.apmType && (!this.apm || !this.apm.length))\n      ) {\n        return false\n      }\n      return true\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    has () {\n      const result = {\n        am: true,\n        pm: true\n      }\n      if (this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(this.hasAm)\n        result.pm = range.some(this.hasPm)\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.minuteRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"minute-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.minuteType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.minuteType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.minutes || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n        }\n      }\n      return range\n    },\n\n    secondRangeList () {\n      if (!this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      const range = []\n      let formatedValue\n      this.opts.secondRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"second-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.secondType, i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (value < 0 || value > 59) { return }\n          formatedValue = this.formatValue(this.secondType, value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const validItems = (this.seconds || []).filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n        }\n      }\n      return range\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      // Force close the dropdown when disabled\n      if (toDisabled && this.showDropdown) {\n        this.showDropdown = false\n      }\n    }\n  },\n\n  methods: {\n    formatValue (type, i) {\n      switch (type) {\n        case 'H':\n        case 'm':\n        case 's':\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n          return i < 10 ? `0${i}` : String(i)\n        case 'h':\n          if (i === 0) {\n            return '12'\n          }\n          return String(i)\n        case 'k':\n          return String(i + 1)\n        case 'hh':\n          if (i === 0) {\n            return '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        case 'kk':\n          return (i + 1) < 10 ? `0${i + 1}` : String(i + 1)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString, fallbackValue) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return fallbackValue || ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      this.hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat, 'HH')\n      this.minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat, 'mm')\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      this.renderHoursList()\n      this.renderList('minute')\n\n      if (this.secondType) {\n        this.renderList('second')\n      }\n\n      if (this.apmType) {\n        this.renderApmList()\n      }\n\n      this.$nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = (this.baseOn12Hours) ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        hours.push(this.formatValue(this.hourType, i))\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!listType || (listType !== 'minute' && listType !== 'second')) { return }\n\n      if (listType === 'minute') {\n        interval = interval || this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval\n      } else {\n        interval = interval || this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval\n      }\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        if (listType === 'minute') {\n          result.push(this.formatValue(this.minuteType, i))\n        } else {\n          result.push(this.formatValue(this.secondType, i))\n        }\n      }\n\n      if (listType === 'minute') {\n        this.minutes = result\n      } else {\n        this.seconds = result\n      }\n    },\n\n    renderApmList () {\n      let apms = []\n      if (this.apmType) {\n        apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n      }\n      this.apms = apms\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.value}\"`)\n        }\n        this.readStringValues(this.value)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.value || {})}\"`)\n        }\n        this.readObjectValues(this.value)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      ['hour', 'minute', 'second', 'apm'].forEach(section => {\n        const sectionType = this[`${section}Type`]\n        if (values.indexOf(sectionType) > -1) {\n          const sanitizedValue = this.sanitizedValue(sectionType, timeValue[sectionType])\n          this[section] = sanitizedValue\n          timeValue[sectionType] = sanitizedValue\n        } else {\n          this[section] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n\n      let regxStr = `${this.hourType}|${this.minuteType}`\n      if (this.secondType) {\n        regxStr += `|${this.secondType}`\n      }\n      if (this.apmType) {\n        regxStr += `|${this.apmType}`\n      }\n\n      const tokensRegxStr = `[(${regxStr})]+`\n      const othersRegxStr = `[^(${regxStr})]+`\n\n      const needsPolyfill = Boolean(!formatString.matchAll || typeof formatString.matchAll !== 'function')\n      const tokensMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, tokensRegxStr) : formatString.matchAll(new RegExp(tokensRegxStr, 'g'))\n      const othersMatchAll = needsPolyfill ? this.matchAllPolyfill(formatString, othersRegxStr) : formatString.matchAll(new RegExp(othersRegxStr, 'g'))\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const tokenType = tokenChunks[vrIndex].token\n            timeValue[tokenType] = this.setValueFromString(value, tokenType)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${this.value}`)\n        }\n      }\n    },\n\n    matchAllPolyfill (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      timeValue[this.hourType] = ''\n      timeValue[this.minuteType] = ''\n      if (this.secondType) {\n        timeValue[this.secondType] = ''\n      }\n      if (this.apmType) {\n        timeValue[this.apmType] = ''\n      }\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, tokenType) {\n      if (!tokenType || !parsedValue) { return '' }\n      let stdValue = ''\n      switch (tokenType) {\n        case `${this.hourType}`:\n          stdValue = (parsedValue !== this.hourType) ? parsedValue : ''\n          this.hour = stdValue\n          break\n        case `${this.minuteType}`:\n          stdValue = (parsedValue !== this.minuteType) ? parsedValue : ''\n          this.minute = stdValue\n          break\n        case `${this.secondType}`:\n          stdValue = (parsedValue !== this.secondType) ? parsedValue : ''\n          this.second = stdValue\n          break\n        case `${this.apmType}`:\n          stdValue = (parsedValue !== this.apmType) ? parsedValue : ''\n          this.apm = stdValue\n          break\n      }\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      const hourValue = baseHour || baseHour === 0 ? Number(baseHour) : ''\n      const apmValue = (this.baseOn12Hours && this.apm) ? String(this.apm).toLowerCase() : false\n\n      CONFIG.HOUR_TOKENS.forEach((token) => {\n        if (token === baseHourType) {\n          fullValues[token] = baseHour\n          return\n        }\n\n        let value\n        let apm\n        switch (token) {\n          case 'H':\n          case 'HH':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue % 12\n              }\n            } else {\n              value = hourValue % 24\n            }\n            fullValues[token] = (token === 'HH' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'k':\n          case 'kk':\n            if (!String(hourValue).length) {\n              fullValues[token] = ''\n              return\n            } else if (this.baseOn12Hours) {\n              if (apmValue === 'pm') {\n                value = hourValue < 12 ? hourValue + 12 : hourValue\n              } else {\n                value = hourValue === 12 ? 24 : hourValue\n              }\n            } else {\n              value = hourValue === 0 ? 24 : hourValue\n            }\n            fullValues[token] = (token === 'kk' && value < 10) ? `0${value}` : String(value)\n            break\n          case 'h':\n          case 'hh':\n            if (apmValue) {\n              value = hourValue\n              apm = apmValue || 'am'\n            } else {\n              if (!String(hourValue).length) {\n                fullValues[token] = ''\n                fullValues.a = ''\n                fullValues.A = ''\n                return\n              } else if (hourValue > 11) {\n                apm = 'pm'\n                value = hourValue === 12 ? 12 : hourValue % 12\n              } else {\n                if (this.baseOn12Hours) {\n                  apm = ''\n                } else {\n                  apm = 'am'\n                }\n                value = hourValue % 12 === 0 ? 12 : hourValue\n              }\n            }\n            fullValues[token] = (token === 'hh' && value < 10) ? `0${value}` : String(value)\n            fullValues.a = apm\n            fullValues.A = apm.toUpperCase()\n            break\n        }\n      })\n\n      if (this.minute || this.minute === 0) {\n        const minuteValue = Number(this.minute)\n        fullValues.m = String(minuteValue)\n        fullValues.mm = minuteValue < 10 ? `0${minuteValue}` : String(minuteValue)\n      } else {\n        fullValues.m = ''\n        fullValues.mm = ''\n      }\n\n      if (this.second || this.second === 0) {\n        const secondValue = Number(this.second)\n        fullValues.s = String(secondValue)\n        fullValues.ss = secondValue < 10 ? `0${secondValue}` : String(secondValue)\n      } else {\n        fullValues.s = ''\n        fullValues.ss = ''\n      }\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    emitTimeValue () {\n      if (!this.fullValues) { return }\n\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullValues = JSON.parse(JSON.stringify(this.fullValues))\n      const baseTimeValue = JSON.parse(JSON.stringify(this.timeValue || {}))\n      const timeValue = {}\n\n      Object.keys(baseTimeValue).forEach((key) => {\n        timeValue[key] = fullValues[key] || ''\n      })\n\n      if (this.useStringValue) {\n        this.$emit('input', this.inputIsEmpty ? '' : String(this.displayTime))\n      } else {\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', {\n        data: fullValues,\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      })\n    },\n\n    translate12hRange (value) {\n      const valueT = value.match(/^(\\d{1,2})(a|p|A|P)$/)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    hasAm (value) {\n      return value < 12 || value === 24\n    },\n\n    hasPm (value) {\n      return value >= 12 && value < 24\n    },\n\n    doubleCheckHourValue () {\n      if (!this.hour || !this.apm || !this.restrictedHourRange || !this.hourRangeIn24HrFormat) { return }\n      const hourIn24 = this.translate12hRange(`${this.hour}${this.apm.substr(0, 1)}`)\n      if (!this.hourRangeIn24HrFormat.includes(hourIn24)) {\n        this.hour = ''\n        if (this.debugMode) {\n          this.debugLog(`After switching AM/PM, the hour value is no longer in the \"hour-range\". Reset it to empty now.`)\n        }\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    isDisabledMinute (value) {\n      if (!this.minuteRangeList) { return false }\n      return !this.minuteRangeList.includes(value)\n    },\n\n    isDisabledSecond (value) {\n      if (!this.secondRangeList) { return false }\n      return !this.secondRangeList.includes(value)\n    },\n\n    isDisabledApm (value) {\n      if (!this.restrictedHourRange) { return false }\n      return !this.has[(value || '').toLowerCase()]\n    },\n\n    forceApmSelection () {\n      if (!this.apm || !this.apm.length) {\n        if (this.has.am) {\n          this.apm = this.apmType === 'A' ? 'AM' : 'am'\n        } else if (this.has.pm) {\n          this.apm = this.apmType === 'A' ? 'PM' : 'pm'\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && (apmValue || '').toLowerCase() === 'am') {\n        return this.amText\n      }\n      if (this.pmText && (apmValue || '').toLowerCase() === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleDropdown () {\n      if (this.disabled) { return }\n      this.showDropdown = !this.showDropdown\n\n      if (this.showDropdown) {\n        this.$emit('open')\n        this.isFocusing = true\n        // Record to check if value did changed in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n      } else {\n        this.$emit('close')\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        if (this.showDropdown) {\n          this.forceApmSelection()\n        } else {\n          this.emptyApmSelection()\n        }\n      }\n    },\n\n    select (type, value) {\n      if (type === 'hour') {\n        if (this.isDisabledHour(value)) { return }\n        this.hour = value\n      } else if (type === 'minute') {\n        if (this.isDisabledMinute(value)) { return }\n        this.minute = value\n      } else if (type === 'second') {\n        if (this.isDisabledSecond(value)) { return }\n        this.second = value\n      } else if (type === 'apm') {\n        if (this.isDisabledApm(value)) { return }\n        this.apm = value\n        if (this.restrictedHourRange) {\n          this.doubleCheckHourValue()\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.showDropdown) {\n        this.toggleDropdown()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.display-time')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      const delay = +(this.blurDelay || 0) || 300\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, delay)\n    },\n\n    onBlur () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        if (this.showDropdown) {\n          this.toggleDropdown()\n        }\n      }\n    },\n\n    keepFocusing () {\n      this.isFocusing = true\n    },\n\n    validItemsInCol (columnClass) {\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    getSideItems (columnClass, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(columnClass)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the first valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        if (this.debugMode) {\n          this.debugLog(`\"${dataKey}\" is the last valid item in \"${columnClass}\" list already`)\n        }\n        return\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      } else {\n        return siblingsInCol[selfIndex + 1]\n      }\n    },\n\n    prevItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    nextItem (columnClass, dataKey) {\n      const targetItem = this.getSideItems(columnClass, dataKey, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    getSideColumnClass (columnClass, toLeft = false) {\n      let targetColumn\n      // Nav to Left\n      if (toLeft) {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = -1\n            break\n          case 'minutes':\n            targetColumn = 'hours'\n            break\n          case 'seconds':\n            targetColumn = 'minutes'\n            break\n          case 'apms':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else {\n              targetColumn = 'minutes'\n            }\n            break\n        }\n      // Nav to Right\n      } else {\n        switch (columnClass) {\n          case 'hours':\n            targetColumn = 'minutes'\n            break\n          case 'minutes':\n            if (this.secondType) {\n              targetColumn = 'seconds'\n            } else if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'seconds':\n            if (this.apmType) {\n              targetColumn = 'apms'\n            } else {\n              targetColumn = 1\n            }\n            break\n          case 'apms':\n            targetColumn = 1\n            break\n        }\n      }\n\n      if (targetColumn === -1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (targetColumn === 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n\n      return targetColumn\n    },\n\n    getFirstItemInSideColumn (columnClass, toLeft = false) {\n      const targetColumnClass = this.getSideColumnClass(columnClass, toLeft)\n      if (!targetColumnClass) { return }\n      const listItems = this.validItemsInCol(targetColumnClass)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    toLeftColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (columnClass) {\n      const targetItem = this.getFirstItemInSideColumn(columnClass, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    getTokenRegex (typeToken) {\n      switch (typeToken) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (typeToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === typeToken)\n    },\n\n    isValidValue (typeToken, testValue) {\n      if (!typeToken || this.isEmptyValue(typeToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(typeToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (typeToken, inputValue) {\n      if (this.isValidValue(typeToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    this.renderFormat()\n  },\n\n  beforeDestroy () {\n    window.clearTimeout(this.debounceTimer)\n  }\n}\n</script>\n\n<template>\n<span class=\"vue__time-picker time-picker\" :style=\"inputWidthStyle\">\n  <input type=\"text\" class=\"display-time\"\n         :class=\"[inputClass, {'disabled': disabled}]\"\n         :style=\"inputWidthStyle\"\n         :id=\"id\"\n         :name=\"name\"\n         :value=\"inputIsEmpty ? null : customDisplayTime\"\n         :placeholder=\"placeholder || formatString\"\n         :tabindex=\"disabled ? null : tabindex\"\n         :disabled=\"disabled\"\n         readonly\n         @focus=\"onFocus\"\n         @blur=\"debounceBlur\"\n         @keydown.esc.exact=\"escBlur\" />\n  <span class=\"clear-btn\" v-if=\"!showDropdown && showClearBtn\" @click=\"clearTime\">&times;</span>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click=\"toggleDropdown\"></div>\n  <div class=\"dropdown\" v-show=\"showDropdown\" :style=\"inputWidthStyle\" @mouseup=\"keepFocusing\" @click.stop=\"\">\n    <div class=\"select-list\" :style=\"inputWidthStyle\">\n      <!-- Common Keyboard Support: less event listeners -->\n      <template v-if=\"!advancedKeyboard\">\n        <ul class=\"hours\">\n          <li class=\"hint\" v-text=\"hourLabelText\"></li>\n          <template v-for=\"(hr, hIndex) in hours\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledHour(hr))\"\n                :key=\"hIndex\"\n                :class=\"{active: hour === hr}\"\n                :disabled=\"isDisabledHour(hr)\"\n                v-text=\"hr\"\n                @click=\"select('hour', hr)\"></li>\n          </template>\n        </ul>\n        <ul class=\"minutes\">\n          <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n          <template v-for=\"(m, mIndex) in minutes\">\n            <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabledMinute(m))\"\n                :key=\"mIndex\"\n                :class=\"{active: minute === m}\"\n                :disabled=\"isDisabledMinute(m)\"\n                v-text=\"m\"\n                @click=\"select('minute', m)\"></li>\n          </template>\n        </ul>\n        <ul class=\"seconds\" v-if=\"secondType\">\n          <li class=\"hint\" v-text=\"secondLabelText\"></li>\n          <template v-for=\"(s, sIndex) in seconds\">\n            <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabledSecond(s))\"\n                :key=\"sIndex\"\n                :class=\"{active: second === s}\"\n                :disabled=\"isDisabledSecond(s)\"\n                v-text=\"s\"\n                @click=\"select('second', s)\"></li>\n          </template>\n        </ul>\n        <ul class=\"apms\" v-if=\"apmType\">\n          <li class=\"hint\" v-text=\"apmLabelText\"></li>\n          <template v-for=\"(a, aIndex) in apms\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledApm(a))\"\n                :key=\"aIndex\"\n                :class=\"{active: apm === a}\"\n                :disabled=\"isDisabledApm(a)\"\n                v-text=\"apmDisplayText(a)\"\n                @click=\"select('apm', a)\"></li>\n          </template>\n        </ul>\n      </template><!-- / Common Keyboard Support -->\n\n      <!--\n        Advanced Keyboard Support\n        Addeds hundreds of additional event lisenters\n      -->\n      <template v-if=\"advancedKeyboard\">\n        <ul class=\"hours\">\n          <li class=\"hint\" v-text=\"hourLabelText\"></li>\n          <template v-for=\"(hr, hIndex) in hours\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledHour(hr))\"\n                :key=\"hIndex\"\n                :class=\"{active: hour === hr}\"\n                :tabindex=\"isDisabledHour(hr) ? null : tabindex\"\n                :data-key=\"hr\"\n                :disabled=\"isDisabledHour(hr)\"\n                v-text=\"hr\"\n                @click=\"select('hour', hr)\"\n                @keydown.space.prevent=\"select('hour', hr)\"\n                @keydown.enter.prevent=\"select('hour', hr)\"\n                @keydown.up.prevent=\"prevItem('hours', hr)\"\n                @keydown.down.prevent=\"nextItem('hours', hr)\"\n                @keydown.left.prevent=\"toLeftColumn('hours')\"\n                @keydown.right.prevent=\"toRightColumn('hours')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"minutes\">\n          <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n          <template v-for=\"(m, mIndex) in minutes\">\n            <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabledMinute(m))\"\n                :key=\"mIndex\"\n                :class=\"{active: minute === m}\"\n                :tabindex=\"isDisabledMinute(m) ? null : tabindex\"\n                :data-key=\"m\"\n                :disabled=\"isDisabledMinute(m)\"\n                v-text=\"m\"\n                @click=\"select('minute', m)\"\n                @keydown.space.prevent=\"select('minute', m)\"\n                @keydown.enter.prevent=\"select('minute', m)\"\n                @keydown.up.prevent=\"prevItem('minutes', m)\"\n                @keydown.down.prevent=\"nextItem('minutes', m)\"\n                @keydown.left.prevent=\"toLeftColumn('minutes')\"\n                @keydown.right.prevent=\"toRightColumn('minutes')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"seconds\" v-if=\"secondType\">\n          <li class=\"hint\" v-text=\"secondLabelText\"></li>\n          <template v-for=\"(s, sIndex) in seconds\">\n            <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabledSecond(s))\"\n                :key=\"sIndex\"\n                :class=\"{active: second === s}\"\n                :tabindex=\"isDisabledSecond(s) ? null : tabindex\"\n                :data-key=\"s\"\n                :disabled=\"isDisabledSecond(s)\"\n                v-text=\"s\"\n                @click=\"select('second', s)\"\n                @keydown.space.prevent=\"select('second', s)\"\n                @keydown.enter.prevent=\"select('second', s)\"\n                @keydown.up.prevent=\"prevItem('seconds', s)\"\n                @keydown.down.prevent=\"nextItem('seconds', s)\"\n                @keydown.left.prevent=\"toLeftColumn('seconds')\"\n                @keydown.right.prevent=\"toRightColumn('seconds')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n        <ul class=\"apms\" v-if=\"apmType\">\n          <li class=\"hint\" v-text=\"apmLabelText\"></li>\n          <template v-for=\"(a, aIndex) in apms\">\n            <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabledApm(a))\"\n                :key=\"aIndex\"\n                :class=\"{active: apm === a}\"\n                :tabindex=\"isDisabledApm(a) ? null : tabindex\"\n                :data-key=\"a\"\n                :disabled=\"isDisabledApm(a)\"\n                v-text=\"apmDisplayText(a)\"\n                @click=\"select('apm', a)\"\n                @keydown.space.prevent=\"select('apm', a)\"\n                @keydown.enter.prevent=\"select('apm', a)\"\n                @keydown.up.prevent=\"prevItem('apms', a)\"\n                @keydown.down.prevent=\"nextItem('apms', a)\"\n                @keydown.left.prevent=\"toLeftColumn('apms')\"\n                @keydown.right.prevent=\"toRightColumn('apms')\"\n                @keydown.esc.exact=\"debounceBlur\"\n                @blur=\"debounceBlur\"\n                @focus=\"keepFocusing\"></li>\n          </template>\n        </ul>\n      </template><!-- / Advanced Keyboard Support -->\n    </div>\n  </div>\n</span>\n</template>\n\n<style>\n.vue__time-picker {\n  display: inline-block;\n  position: relative;\n  font-size: 1em;\n  width: 10em;\n  font-family: sans-serif;\n  vertical-align: middle;\n}\n\n.vue__time-picker * {\n  box-sizing: border-box;\n}\n\n.vue__time-picker input.display-time {\n  border: 1px solid #d2d2d2;\n  width: 10em;\n  height: 2.2em;\n  padding: 0.3em 0.5em;\n  font-size: 1em;\n}\n\n.vue__time-picker input.display-time:disabled,\n.vue__time-picker input.display-time.disabled {\n  color: #d2d2d2;\n}\n\n.vue__time-picker .clear-btn {\n  position: absolute;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  margin-top: -0.15em;\n  z-index: 3;\n  font-size: 1.1em;\n  line-height: 1em;\n  vertical-align: middle;\n  width: 1.3em;\n  color: #d2d2d2;\n  background: rgba(255,255,255,0);\n  text-align: center;\n  font-style: normal;\n\n  -webkit-transition: color .2s;\n  transition: color .2s;\n}\n\n.vue__time-picker .clear-btn:hover {\n  color: #797979;\n  cursor: pointer;\n}\n\n.vue__time-picker .time-picker-overlay {\n  z-index: 2;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.vue__time-picker .dropdown {\n  position: absolute;\n  z-index: 5;\n  top: calc(2.2em + 2px);\n  left: 0;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0,0,0,0.15);\n  width: 10em;\n  height: 10em;\n  font-weight: normal;\n}\n\n.vue__time-picker .dropdown .select-list {\n  width: 10em;\n  height: 10em;\n  overflow: hidden;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between;\n}\n\n.vue__time-picker .dropdown ul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  flex: 1 1 0.00001px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.vue__time-picker .dropdown ul.minutes,\n.vue__time-picker .dropdown ul.seconds,\n.vue__time-picker .dropdown ul.apms{\n  border-left: 1px solid #fff;\n}\n\n.vue__time-picker .dropdown ul li {\n  list-style: none;\n  text-align: center;\n  padding: 0.3em 0;\n  color: #161616;\n}\n\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):focus {\n  background: rgba(0,0,0,.08);\n  color: #161616;\n  cursor: pointer;\n}\n\n.vue__time-picker .dropdown ul li:not([disabled]).active,\n.vue__time-picker .dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker .dropdown ul li:not([disabled]).active:focus {\n  background: #41B883;\n  color: #fff;\n}\n\n.vue__time-picker .dropdown ul li[disabled],\n.vue__time-picker .dropdown ul li[disabled]:hover {\n  background: transparent;\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.vue__time-picker .dropdown .hint {\n  color: #a5a5a5;\n  cursor: default;\n  font-size: 0.8em;\n}\n</style>\n"],"sourceRoot":"node_modules/vue2-timepicker/src"}]}